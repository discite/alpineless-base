# This is a basic workflow to help you get started with Actions

name: Build base image

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "base" ]
  pull_request:
    branches: [ "base", ]
  schedule:
    - cron: '0 0 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  IMAGE_NAME: distroless-alpine

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "packer"
  packer:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # The name of the job
    name: packer
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      packages: write # for publishing packages and images in the registry

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Download Speculator results to get Alpine version
        run:
          curl 'https://raw.githubusercontent.com/discite/speculator/main/results.json' --output results.auto.pkrvars.json
          
      - name: Obtain Image Tag
        run:
          echo "IMAGE_TAG=$(jq '."alpine-base-image"' results.auto.pkrvars.json)" >> $GITHUB_ENV
          
      - name: Print Image Tag
        run:
          echo $IMAGE_TAG
          
      - name: Log in to registry
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      # fix backwards incompatibilities in template
      - name: Fix Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: fmt
      
      # validate templates
      - name: Validate Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only
          target: docker-ansible-base.pkr.hcl
      
      - name: Create building working directory
        run: |
          mkdir -p infrastructure/packer
          cp docker-ansible-base.pkr.hcl infrastructure/packer/
          cp results.auto.pkrvars.json infrastructure/packer/
          ls infrastructure/packer
      
      # initialize artifact
      #- name: Initialize Artifact
      #  uses: hashicorp/packer-github-actions@master
      #  with:
      #    command: init
      #    arguments: "-upgrade"
      #    target: docker-ansible-base.pkr.hcl
      #    working_directory: infrastructure/packer
      #  env:
      #    PACKER_LOG: 1
      
      # build artifact (disabled temporary)
      #- name: Build Artifact
      #  uses: hashicorp/packer-github-actions@master
      #  with:
      #    command: build
      #    arguments: "-color=false -on-error=abort"
      #    target: docker-ansible-base.pkr.hcl
      #    working_directory: infrastructure/packer
      #  env:
      #    PACKER_LOG: 1
     
      - name: list packer workaround working directory
        run: ls .
        working-directory: ./infrastructure/packer
     
      - name: Packer workaround init
        run: PACKER_LOG=1 packer init .
        working-directory: ./infrastructure/packer
        
      - name: Packer workaround build
        run: PACKER_LOG=1 packer build -color=false -on-error=abort .
        working-directory: ./infrastructure/packer
        
      - name: List docker images build
        run: docker image ls

      - name: Run Trivy vulnerability scanner in images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          security-checks: 'vuln,secret,config'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ env.IMAGE_TAG }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ env.IMAGE_TAG }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "base" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
